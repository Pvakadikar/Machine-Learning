# -*- coding: utf-8 -*-
"""ADVANCED_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17kAbWbtz5xLffy29Prhpop5bxHVZCupR

#  Library import
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("heart.csv")

df.isnull().sum()

df = df.dropna()  # Dropping null values

# Descriptive statistics for fasting blood sugar > 120 mg/dl
fbs_stats = df['fbs'].describe()

# Descriptive statistics for serum cholestoral in mg/dl
chol_stats = df['chol'].describe()

# Bar plot for the 'fbs' column
marital_counts = df['cp'].value_counts()
plt.bar(marital_counts.index, marital_counts.values)
plt.xlabel('fbs')
plt.ylabel('Count')
plt.title('Distribution of fbs')
plt.show()

# Bar plot for the 'Chol' column
marital_counts = df['chol'].value_counts()
plt.bar(marital_counts.index, marital_counts.values)
plt.xlabel('Chol')
plt.ylabel('Count')
plt.title('Distribution of fbs')
plt.show()

# Mean, standard deviation, and correlation between 'resting electrocardiographic results (values 0,1,2)' and 'ST depression induced by exercise relative to rest'
restecg_mean = df['restecg'].mean()
restecg_std = df['restecg'].std()
restecg_oldpeak_corr = df[['restecg', 'oldpeak']].corr()

print("Mean restecg:", restecg_mean)
print("Standard deviation of oldpeak:", restecg_std)
print("Correlation between age and oldpeak:\n", restecg_oldpeak_corr)

age_mean = df['age'].mean()
age_std = df['age'].std()
age_slp_corr = df[['age', 'slp']].corr()

print("Mean Age:", age_mean)
print("Standard deviation of slp:", age_std)
print("Correlation between age and slp:\n", age_slp_corr)

# Correlation Heatmap:
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Scatter plot of Chol vs. Age
plt.scatter(df['chol'], df['age'])
plt.xlabel('chol')
plt.ylabel('age')
plt.title('Chol vs. Age')
plt.show()

# Scatter plot of Age vs. Restecg
plt.scatter(df['restecg'], df['age'])
plt.xlabel('restecg')
plt.ylabel('age')
plt.title('Restecg vs. Age')
plt.show()

# Bar plot of thalachh
education_counts = df['thalachh'].value_counts()
plt.bar(education_counts.index, education_counts.values)
plt.xlabel('Thalachh')
plt.ylabel('Count')
plt.title('Distribution of Thalachh')
plt.show()

# Boxplot of Age by Chol
sns.boxplot(x=df['age'], y=df['chol'])
plt.xlabel('Age')
plt.ylabel('Chol')
plt.title('Distribution of Chol by Age')
plt.show()

# Histogram of maximum heart rate achieved
plt.hist(df['thalachh'], bins=20)
plt.xlabel('Thalachh')
plt.ylabel('Count')
plt.title('Distribution of Maximum heart rate achieved')
plt.show()

job_deposit_counts = df.groupby(['trtbps', 'thalachh']).size().unstack()
job_deposit_counts.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.xlabel('Resting blood pressure')
plt.ylabel('Maximum heart rate achieved')
plt.title('Relationship between Resting blood pressure and Maximum heart rate achieved')
plt.legend(['High blood pressure', 'Low blood pressure'])
plt.show()

df.describe()

df.info()

"""# Converting categorical data into integer data"""

df1 = df.apply(lambda x: pd.factorize(x)[0])

df1.info()

from sklearn.model_selection import train_test_split

df1['chol'] = df1['chol'].astype('category')

x = df1.drop('chol', axis=1)
y = df1['chol']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print(len(x_train))
print(len(x_test))

print(len(y_train))
print(len(y_test))

"""# Confusion matrix generation"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import ConfusionMatrixDisplay
import warnings
warnings.filterwarnings('ignore')

"""Decision tree Classifier"""

from sklearn.tree import DecisionTreeClassifier
DT=DecisionTreeClassifier()

DT.fit(x_test, y_test)

y_pred_DT = DT.predict(x_test)

"""Confusion matrix for Decision Tree"""

confusion_matrix(y_test, y_pred_DT)

dtc_auc=accuracy_score(y_test,y_pred_DT)
print("Accuracy of DT model:", dtc_auc)

print(classification_report(y_test, y_pred_DT))

"""Linear Regression"""

from sklearn.linear_model import LinearRegression

#fitting model
model_1 = LinearRegression()
model_1.fit(x_train, y_train)
model_1.score(x_train, y_train)

model_1.fit(x_train, y_train)

print("Parameters:", model_1.coef_, model_1.intercept_)
print("Coefficient:", model_1.coef_[0])
print("Intercept:", model_1.intercept_)

"""KNN algorithm"""

from sklearn.neighbors import KNeighborsClassifier
KNN= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )

KNN.fit(x_test, y_test)

df1 = np.array(df1, dtype=np.float32)

y_pred_KNN = KNN.predict(x_test)

confusion_matrix(y_test, y_pred_KNN)

KNN_auc=accuracy_score(y_test,y_pred_KNN)
print("Accuracy of KNN model:", KNN_auc)

print(classification_report(y_test, y_pred_KNN))

from sklearn.ensemble import RandomForestClassifier
RF= RandomForestClassifier(n_estimators=40)

RF.fit(x_test, y_test)

y_pred = RF.predict(x_test)

confusion_matrix(y_test, y_pred_RF)

RF_auc=accuracy_score(y_test,y_pred_KNN)
print("Accuracy of RF model:", RF_auc)

print(classification_report(y_test, y_pred_RF))